1388. Pizza With 3n Slices

There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:
You will pick any pizza slice.

Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.
Your friend Bob will pick the next slice in the clockwise direction of your pick.
Repeat until there are no more slices of pizzas.
Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.

Example 1:
Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.

Example 2:
Input: slices = [8,9,8,6,1,1]
Output: 16
Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.
Constraints:

3 * n == slices.length
1 <= slices.length <= 500
1 <= slices[i] <= 1000

class Solution {
public:
int solve(int index,int endIndex ,vector<int>&slices,int n){
    if(n==0 || index>endIndex){
        return 0;
    }
  int take=slices[index]+solve(index+2,endIndex,slices,n-1);
  int notTake=0+solve(index +1,endIndex,slices,n);
  return max(take,notTake);   

 }
  int solveMemo(int index, int endIndex, vector<int>& slices, int n, vector<vector<int>>& dp) {
        if (n == 0 || index > endIndex) {
            return 0;
        }
        
        if (dp[index][n] != -1) {
            return dp[index][n];
        }

        int take = slices[index] + solveMemo(index + 2, endIndex, slices, n - 1, dp);
        int notTake = 0 + solveMemo(index + 1, endIndex, slices, n, dp);

        return dp[index][n] = max(take, notTake);
    }

      int solveTabulation(int startIndex, int endIndex, vector<int>& slices, int n) {
        int length = endIndex - startIndex + 1;
        vector<vector<int>> dp(length + 1, vector<int>(n + 1, 0));

        for (int index = length - 1; index >= 0; index--) {
            for (int remaining = 1; remaining <= n; remaining++) {
                int take = slices[startIndex + index] + (index + 2 <= length - 1 ? dp[index + 2][remaining - 1] : 0);
                int notTake = dp[index + 1][remaining];
                dp[index][remaining] = max(take, notTake);
            }
        }
        return dp[0][n];
    }
    int maxSizeSlices(vector<int>& slices) {

       /* Recursion 
        int k=slices.size();
        int case1=solve(0,k-2,slices,k/3);
        int case2=solve(1,k-1,slices,k/3);
        */
          int k = slices.size();
        
        // Memoization 
      /*  vector<vector<int>>dp1(k,vector<int>(k /3 + 1,-1));
        vector<vector<int>>dp2(k,vector<int>(k /3 + 1,-1));
        int case1 = solveMemo(0, k - 2, slices, k / 3, dp1);
        int case2 = solveMemo(1, k - 1, slices, k / 3, dp2);
       */
         int case1 = solveTabulation(0, k - 2, slices, k / 3);
        int case2 = solveTabulation(1, k-1, slices, k/3);
        return max(case1, case2);
    }
};


# 0 1 Knapsack

Problem statement
A thief is robbing a store and can carry a maximal weight of W into his knapsack. There are N items and the ith item weighs wi and is of value vi. Considering the constraints of the maximum weight that a knapsack can carry, you have to find and return the maximum value that a thief can generate by stealing items.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= N <= 10^2
1<= wi <= 50
1 <= vi <= 10^2
1 <= W <= 10^3

Time Limit: 1 second
Sample Input:
1 
4
1 2 4 5
5 4 8 6
5
Sample Output:
13

#include <bits/stdc++.h> 

int solve(vector<int>&weight,vector<int>&value,int index,int capacity){
  if (index == 0) {
    if (weight[index] <=capacity)

      return value[0];
    else
      return 0;
  }
  int incl = 0;
  if (weight[index] <= capacity) {
    incl = value[index] +
           solve(weight, value, index - 1, capacity - weight[index]);
    int excl = 0 + solve(weight, value, index - 1, capacity);
    int ans = max(incl, excl);
    return ans;
  }
}
 
int solve(vector<int>& weight, vector<int>& value, int index, int maxWeight, vector<vector<int>>& dp) {
    if (index<0 ||maxWeight==0) {
        return 0;
    }
    if (dp[index][maxWeight] != -1) {
        return dp[index][maxWeight];
    }
    if (weight[index] > maxWeight) {
        return dp[index][maxWeight] = solve(weight, value, index - 1, maxWeight, dp);
    } else {
        int include = value[index]+solve(weight, value, index - 1, maxWeight - weight[index], dp);
        int exclude = solve(weight,value,index -1,maxWeight,dp);

        return dp[index][maxWeight] = max(include, exclude);
    }
}
/*
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    vector<vector<int>> dp(n, vector<int>(maxWeight + 1, -1));
    return solve(weight, value, n - 1, maxWeight, dp);
}
*/


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    vector<int> dp(maxWeight + 1, 0);
    for (int i = 0; i < n; i++) {
        for (int w = maxWeight; w >= weight[i]; w--) {
            dp[w] = max(dp[w], value[i] + dp[w - weight[i]]);
        }
    }
    return dp[maxWeight];
}
