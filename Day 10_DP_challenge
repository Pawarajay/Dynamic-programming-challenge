72. Edit Distance

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

class Solution {
public:

    int solveRecursion(string &a,string &b ,int i,int j)
    {
        if(i== a.length())
        {
        return b.length()-j;
        }

        if(j==b.length())
        {
        return a.length()-i;
        }
        int ans=0;
        if(a[i]==b[j])
        {
            return (a,b,i+1,j+1);
        }
        else {
            int Insert=1+solveRecursion(a,b,i,j+1);
            int Delete=1+solveRecursion(a,b,i+1,j);
            int Replace=1+solveRecursion(a,b,i+1,j+1);
            ans=min(Insert,min(Delete,Replace));
        }
        return ans;
    }

     int solveMemo(string &a,string &b ,int i,int j,vector<vector<int>>&dp)
    {
        if(i== a.length())
        {
        return b.length()-j;
        }

        if(j==b.length())
        {
        return a.length()-i;
        }
        if(dp[i][j]!=-1)
        return dp[i][j];
        int ans=0;
        if(a[i]==b[j])
        {
            return (a,b,i+1,j+1);
        }
        else {
            int Insert=1+solveMemo(a,b,i,j+1,dp);
            int Delete=1+solveMemo(a,b,i+1,j,dp);
            int Replace=1+solveMemo(a,b,i+1,j+1,dp);
            ans=min(Insert,min(Delete,Replace));
        }
        return dp[i][j]=ans;
    }


   int solveTab(string a,string b )
    {
        vector<int>curr(b.length()+1,0);
        vector<int>next(b.length()+1,0);

        for(int j=0;j<b.length();j++)
        {
            next[j]=b.length()-j;
        }
        for(int i=a.length()-1;i>=0;i--)
        {
            for(int j=b.length()-1;j>=0;j--)
            {
                curr[b.length()]=a.length()-i;
                int ans=0;
                if(a[i]==b[j])
                {
                    ans=next[j+1];
                }
                else
                {
            int Insert=1+curr[j+1];
            int Delete=1+next[j];
            int Replace=1+next[j+1];
            ans=min(Insert,min(Delete,Replace)); 
                }
                curr[j]=ans;
            }
            next=curr;
        }
        return next[0];
    }
    int minDistance(string word1, string word2)
     {
        //return solveRecursion(word1,word2,0,0);
        //vector<vector<int>>dp(word1.length(),vector<int>(word2.length(),-1));
        //return solveMemo(word1,word2,0,0,dp);
        if(word1.length() == 0)
        return word2.length();

        if(word2.length() ==0)
        return word1.length();
        return solveTab(word1,word2);
    }
};


#801. Minimum Swaps To Make Sequences Increasing
You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].

For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.

An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].

 

Example 1:

Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
Output: 1
Explanation: 
Swap nums1[3] and nums2[3]. Then the sequences are:
nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]
which are both strictly increasing.
Example 2:

Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
Output: 1
 

Constraints:

2 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 2 * 105

class Solution {
public:

    int solve(vector<int>& nums1, vector<int>& nums2, int index, bool swapped) {
        if (index == nums1.size())
            return 0;
        
        int ans = INT_MAX;
    
        int prev1 = nums1[index - 1];
        int prev2 = nums2[index - 1];

        if (swapped) {
            swap(prev1, prev2);
        }
        if (nums1[index] > prev1 && nums2[index] > prev2) {
            ans = solve(nums1, nums2, index + 1, false);
        }
        if (nums1[index] > prev2 && nums2[index] > prev1) {
            ans = min(ans, 1 + solve(nums1, nums2, index + 1, true));
        }
        
        return ans;
    }

    

    int solve2(vector<int>& nums1, vector<int>& nums2) {
          int n = nums1.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        for(int index=n-1;index>=0;index--)
    {
        for(int swapped=1;swapped>=0;swapped--)
        {
        int ans = INT_MAX;
    
        int prev1 = nums1[index - 1];
        int prev2 = nums2[index - 1];

        if (swapped) 
            swap(prev1, prev2);
        
        if (nums1[index] > prev1 && nums2[index] > prev2) 
            ans = dp[index +1][0];
        
        if (nums1[index] > prev2 && nums2[index] > prev1) 
            ans = min(ans, 1 +dp[ index + 1] [1]);
            return dp[index][swapped]=ans;
        }
    }
        return dp[1][0];
    }
    
 
int solveTabulation(vector<int>& nums1, vector<int>& nums2) { 
    int n = nums1.size();
    
    vector<vector<int>> dp(n + 1, vector<int>(2, INT_MAX));
    dp[n][0] = 0;
    dp[n][1] = 0;  

    for (int index = n - 1; index >= 1; index--) {
        for (int swapped = 1; swapped >= 0; swapped--) {
            int prev1 = nums1[index - 1];
            int prev2 = nums2[index - 1];
            if (swapped) {
                swap(prev1, prev2);
            }
            if (nums1[index] > prev1 && nums2[index] > prev2) {
                dp[index][swapped] = min(dp[index][swapped], dp[index + 1][0]);
            }
            if (nums1[index] > prev2 && nums2[index] > prev1) {
                dp[index][swapped] = min(dp[index][swapped], 1 + dp[index + 1][1]);
            }
        }
    }
    
    
    return dp[1][0];
}

int minSwap(vector<int>& nums1, vector<int>& nums2) {
   
   // nums1.insert(nums1.begin(), -1);
   // nums2.insert(nums2.begin(), -1);
   // return solve(nums1, nums2);
   
    int n = nums1.size();
    int prevNoSwap = 0, prevSwap = 1;
    for (int i = 1; i < n; ++i) {

        int currNoSwap = INT_MAX, currSwap = INT_MAX;

        if (nums1[i] > nums1[i-1] && nums2[i] > nums2[i-1]) {
            currNoSwap = min(currNoSwap, prevNoSwap);
            currSwap = min(currSwap, prevSwap + 1);
        }
        if (nums1[i] > nums2[i-1] && nums2[i] > nums1[i-1]) {

            currNoSwap = min(currNoSwap, prevSwap);
            currSwap = min(currSwap, prevNoSwap + 1);
        }

        prevNoSwap = currNoSwap;
        prevSwap = currSwap;
    }
    return min(prevNoSwap, prevSwap);
}

};

#1402. Reducing Dishes

A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

Example 1:

Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.
Example 2:

Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)
Example 3:

Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.
 

Constraints:

n == satisfaction.length
1 <= n <= 500
-1000 <= satisfaction[i] <= 1000

class Solution {
public:
int solve(vector<int>&satisfaction,int index,int time)
{
    if(index==satisfaction.size())
    return 0;
    int include=satisfaction[index]*(time+1)+solve(satisfaction,index+1,time+1);
    int exclude= 0 +solve(satisfaction,index+1,time);
    return max(include,exclude);
}

int solve2(vector<int>&satisfaction,int index,int time,vector<vector<int>>&dp)
{
    if(index==satisfaction.size())
    return 0;
    if(dp[index][time]!=-1)
    return dp[index][time];
    int include=satisfaction[index]*(time+1)+solve2(satisfaction,index+1,time+1,dp);
    int exclude= 0 +solve2(satisfaction,index+1,time,dp);
    return dp[index][time]=max(include,exclude);
   
}
 int solveTab(vector<int>&satisfaction)
 {
    int n=satisfaction.size();
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
     for(int index=n-1;index>=0;index--)
    {
        for(int time=index;time>=0;time--)
        {
            int include=satisfaction[index]*(time+1)+ dp[index+1][time+1];
            int exclude=dp[index+1][time]+0;
            dp[index][time]=max(include,exclude);
        }
    }

    return dp[0][0];
 }
 int solveSpaceOptimized(vector<int>& satisfaction) {
    int n = satisfaction.size();
    vector<int> next(n + 1, 0), curr(n + 1, 0);
    for (int index = n - 1; index >= 0; index--) {
        for (int time = index; time >= 0; time--) {
            int include = satisfaction[index] * (time + 1) + next[time + 1];
            int exclude = next[time];
            curr[time] = max(include, exclude);
        }
        next = curr;
    }
    return next[0];
}
    int maxSatisfaction(vector<int>& satisfaction)
     {
        
        //return solve(satisfaction,0,0);
     
        sort(satisfaction.begin(),satisfaction.end());
       // int n=satisfaction.size();
       // vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return  solveSpaceOptimized(satisfaction);
    }
};
