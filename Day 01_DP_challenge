 Maximum sum of non-adjacent elements
Problem statement
You are given an array/list of ‘N’ integers. You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.
Note:
A subsequence of an array/list is obtained by deleting some number of elements (can be zero) from the array/list, leaving the remaining elements in their original order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 500
1 <= N <= 1000
0 <= ARR[i] <= 10^5

Where 'ARR[i]' denotes the 'i-th' element in the array/list.

Time Limit: 1 sec.
Sample Input 1:
2
3
1 2 4
4
2 1 4 9
Sample Output 1:
5
11
Explanation to Sample Output 1:
In test case 1, the sum of 'ARR[0]' & 'ARR[2]' is 5 which is greater than 'ARR[1]' which is 2 so the answer is 5.

In test case 2, the sum of 'ARR[0]' and 'ARR[2]' is 6, the sum of 'ARR[1]' and 'ARR[3]' is 10, and the sum of 'ARR[0]' and 'ARR[3]' is 11. So if we take the sum of 'ARR[0]' and 'ARR[3]', it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.

#include <bits/stdc++.h>
#include<vector>

int solveRecursive(vector<int>nums,int n){
    if(n<0)
    return 0;
    if(n==0)
    return nums[0];
    int incl=solveRecursive(nums,n-2)+nums(n);
    int excl=solveRecursive(nums,n-1)+0;
    return (incl,excl);
} 

int solveMemorization(vector<int>&nums,int n,vector<int>&dp){
    if(n<0) 
    return 0;
    if(n==0)
    
    return nums[0];
    if(dp[n]!=-1)
    return dp[n];

    int incl=solveMemorization(nums,n-2,dp)+nums[n];
    int excl=solveMemorization(nums,n-1,dp)+ 0;
    dp[n]=max(incl,excl);
    return dp[n];


}
int solveTab(vector<int>&nums){
   int n=nums.size();
   vector<int>dp(n,0);
   dp[0]=nums[0];

   for(int i=1;i<n;i++){
       int incl=dp[i-2]+nums[i];
       int excl=dp[i-1]+0;
       dp[i]=max(incl,excl);
   }
   return dp[n-1];

}

  int solveSpace(vector<int>&nums)
  {
    int n=nums.size();
    int prev2=0;
    int prev1=nums[0];
    for(int i=1;i<n;i++)
    {
      int incl=prev2+ nums[i];
      int excl=prev1+0;
      int ans=max(incl,excl);
      prev2=prev1;
      prev1=ans;
    }
    return prev1;
      }

int maximumNonAdjacentSum(vector<int> &nums){
   
 //  int n=nums.size();
   //int ans=solveRecursive(nums,n-1);
  // return ans;

/*
int n=nums.size();
vector<int>dp(n,-1);
return solveMemorization(nums,  n-1, dp);
*/

 // return  solveTab(nums);
 return solveSpace(nums);
  }


#2 Minimum Elements
Problem statement
You are given an array of ‘N’ distinct integers and an integer ‘X’ representing the target sum. You have to tell the minimum number of elements you have to take to reach the target sum ‘X’.

Note:
You have an infinite number of elements of each type.
For example
If N=3 and X=7 and array elements are [1,2,3]. 
Way 1 - You can take 4 elements  [2, 2, 2, 1] as 2 + 2 + 2 + 1 = 7.
Way 2 - You can take 3 elements  [3, 3, 1] as 3 + 3 + 1 = 7.
Here, you can see in Way 2 we have used 3 coins to reach the target sum of 7.
Hence the output is 3.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= N <= 15
1 <= nums[i] <= (2^31) - 1
1 <= X <= 10000

All the elements of the “nums” array will be unique.
Time limit: 1 sec
Sample Input 1 :
2
3 7
1 2 3
1 0
1
Sample output 1 :
 3
 0
Explanation For Sample Output 1:
For the first test case,
Way 1 - You can take 4 elements  [2, 2, 2, 1] as 2 + 2 + 2 + 1 = 7.
Way 2 - You can take 3 elements  [3, 3, 1] as 3 + 3 + 1 = 7.
Here, you can see in Way 2 we have used 3 coins to reach the target sum of 7.
Hence the output is 3.

For the second test case,
Way 1 - You can take 3 elements  [1, 1, 1] as 1 + 1 + 1  = 3.
Way 2 - You can take 2 elements  [2, 1] as 2 + 1 = 3.
Here, you can see in Way 2 we have used 2 coins to reach the target sum of 7.
Hence the output is 2.
Sample Input 2 :
2
3 4
12 1 3
2 11
2 1

#include <bits/stdc++.h> 

int solve(vector<int>&num,int x)
{
    if(x==0)
    return 0;
    if(x<0)
    return INT_MAX;
    int mini=INT_MAX;
    for (int i = 0; i < num.size(); i++) {
    int ans = solve(num, x - num[i]);
    if (ans != INT_MAX)
      mini = min(mini, 1 + ans);
    }
    return mini;
}
// Memorize solution
int solve2(vector<int>&num,int x,vector<int>&dp){
    if(x==0)
    return 0;
    if(x<0)
    return INT_MAX;
    if(dp[x]!=-1)
    return dp[x];
   
    int mini=INT_MAX;
    for(int i=0;i<num.size();i++){
    int ans=solve(num,x-num[i],dp);
    if(ans!=INT_MAX)
    mini=min(mini,1+ ans);
    }
    dp[x]= mini;
    return mini;

}


int solve3(vector<int>&num,int x)
{
    vector<int>dp(x+1,INT_MAX);

    dp[0]=0;

    for(int i=1;i<=x();i++)
    {
        for(int j=0;j>num.size();j++)
        {
           
        }

    }
}
int minimumElements(vector<int> &num, int x)
{ 
   // int ans=solve(num,x);
    //return ans;

    vector<int>dp(x+1,-1);

    int ans=solve(num,  x);
    if(ans==INT_MAX)
    return -1;
    else
     return ans;
}
