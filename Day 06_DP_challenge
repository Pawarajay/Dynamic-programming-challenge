118. Pascal's Triangle
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30
class Solution {
public:
int pascalRecursion(int i, int j) {
    if (j == 0 || j == i) {
        return 1;
    }
    return pascalRecursion(i-1, j-1) + pascalRecursion(i-1, j);
} 

int pascalMemoization(int i, int j) {
    if (j == 0||j == i) {
        return 1;
    }
    if (memo[i][j]!= -1) {
        return memo[i][j];
    } 
    memo[i][j] = pascalMemoization(i-1, j-1) + pascalMemoization(i-1,j);
    return memo[i][j];
}

    vector<vector<int>> generate(int numRows) {
       
    vector<vector<int>> triangle(numRows);

    for (int row_num = 0; row_num < numRows; ++row_num) {
        triangle[row_num] = vector<int>(row_num + 1, 1);
        for (int col_num = 1;col_num < row_num; ++col_num) {
            triangle[row_num][col_num] = triangle[row_num - 1][col_num - 1] + triangle[row_num - 1][col_num];
        }
    }
    
    return triangle;
    }
};
