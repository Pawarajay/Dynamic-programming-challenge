Largest square formed in a matrix+3

Given a binary matrix mat of size n * m, find out the maximum length of a side of a square sub-matrix with all 1s.

Examples:

Input: n = 6, m = 5
mat = [[0, 1, 1, 0, 1], 
       [1, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0]]
Output: 3
Explanation: 

The maximum length of a side of the square sub-matrix is 3 where every element is 1.
Input: n = 2, m = 2
mat = [[1, 1], 
       [1, 1]]
Output: 2
Explanation: The maximum length of a side of the square sub-matrix is 2. The matrix itself is the maximum sized sub-matrix in this case.
Input: n = 2, m = 2
mat = [[0, 0], 
       [0, 0]]
Output: 0
Explanation: There is no 1 in the matrix.
Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 500
0 ≤ mat[i][j] ≤ 1 

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++
class Solution {
    private:
    int solve(vector<vector<int>>& mat, int i, int j, int &maxi) {
        if (i>= mat.size() || j>=mat[0].size())
            return 0;
        
        int right =solve(mat, i,j + 1, maxi);
        int diagonal =solve(mat, i + 1, j + 1,maxi);
        int down =solve(mat, i + 1, j,maxi);
        
        if (mat[i][j]==1) {
            int ans = 1+min(right, min(diagonal, down));
            maxi = max(maxi, ans);
            return ans;
        } else {
            return 0;
        }
    }
int solve2(vector<vector<int>>& mat, int i, int j, int &maxi, vector<vector<int>>& dp) {
    if (i >= mat.size() || j >= mat[0].size())
        return 0;
    
    if (dp[i][j] != -1)
        return dp[i][j];

    int right = solve2(mat,i,j + 1,maxi,dp);
    int diagonal = solve2(mat, i+j,j+1,maxi,dp);
    int down = solve2(mat, i+1,j,maxi,dp);

    if (mat[i][j] == 1)
    {
        int ans = 1 + min(right,min(diagonal,down));
        maxi = max(maxi, ans);
        return dp[i][j] = ans; 
    } 
    else {
        return dp[i][j] = 0; 
    }
}
  public:
  int maxSquare(int n, int m, vector<vector<int>> mat) {
   int maxi = 0;
    vector<vector<int>> dp(n,vector<int>(m, -1)); 
    solve2(mat,0,0,maxi,dp); 
    return maxi;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> mat(n, vector<int>(m, 0));
        for (int i = 0; i < n * m; i++)
            cin >> mat[i / m][i % m];

        Solution ob;
        cout << ob.maxSquare(n, m, mat) << "\n";
    }
    return 0;
}
// } Driver Code Ends

#2 House Robber II
Problem statement
Mr. X is a professional robber planning to rob houses along a street. Each house has a certain amount of money hidden.
All houses along this street are arranged in a circle. That means the first house is the neighbour of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses are broken into on the same night.
You are given an array/list of non-negative integers 'ARR' representing the amount of money of each house. Your task is to return the maximum amount of money Mr. X can rob tonight without alerting the police.
Note:
It is possible for Mr. X to rob the same amount of money by looting two different sets of houses. Just print the maximum possible robbed amount, irrespective of sets of houses robbed.
For example:
(i) Given the input array arr[] = {2, 3, 2} the output will be 3 because Mr X cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. So, he’ll rob only house 2 (money = 3)
(ii) Given the input array arr[] = {1, 2, 3, 1} the output will be 4 because Mr X rob house 1 (money = 1) and then rob house 3 (money = 3).
(iii) Given the input array arr[] = {0} the output will be 0 because Mr. X has got nothing to rob.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= N <= 5 x 10 ^ 3
1 <= ARR[i] <= 10 ^ 9

Time limit: 1 sec.
Sample Input 1:
3
1
0
3
2 3 2
4
1 3 2 1
Sample Output 1:
0
3
4
Explanation of Input 1:
(i) Mr. X has only one house to rob, but with no money.

(ii) Mr. X cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses (remember, it’s a circular street). So, he’ll rob only house 2 (money = 3) with a maximum value

(iii) Mr. X will get maximum value when he robs house 2 (money = 3) and then robs house 4 (money = 1) i.e. 4 units of money.
Sample Input 2:
3
5
1 5 1 2 6
3
2 3 5
4
1 3 2 0
Sample Output 2:
11
5
3


#include <bits/stdc++.h>
 
 long long int solve(vector<int>&nums){
     int n=nums.size();
     long long int prev2=0;
     long long int prev1=nums[0];
     for(int i=1;i<n;i++){
         long long int incl=prev2+nums[i];
         long long int excl=prev1+0;
         long long int ans=max(incl,excl);
         prev2=prev1;
         prev1=ans;
     }
     return prev1;
 }

long long int houseRobber(vector<int>& valueInHouse)
{
   int n=valueInHouse.size();
   if(n==1)
   return valueInHouse[0];
   vector<int>first,second;
   for(int i=0;i<n;i++){
       if(i!=n-1)
       first.push_back(valueInHouse[i]);
       if(i!=0)
       second.push_back(valueInHouse[i]);
   }
   return max(solve(first),solve(second));
}
