70. Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

class Solution {
public:
    vector<int> dp;
    int solve(int n) {
   
        if (n < 0) return 0;
        if (n == 0) return 1;
        if (dp[n] != -1) return dp[n];

        int oneStep = solve(n - 1);
        int twoSteps = solve(n - 2);
        dp[n] = oneStep + twoSteps;
        return dp[n];
    }

    int climbStairs(int n) {
       
        //dp.resize(n + 1, -1);
        //return solve(n);
        
         if (n == 0) return 1;
        if (n == 1) return 1;
        
        int prev2 = 1;  // dp[0]
        int prev1 = 1;  // dp[1]

        int curr = 0;
        for (int i = 2; i <= n; i++) {
            curr = prev1 + prev2;  
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    
    }
};

#121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int mini=prices[0];

        int profit=0;

        for(int i=0;i<prices.size();i++)
        {
            int diff = prices[i]-mini;

            profit =max(profit,diff);

            mini=min(mini,prices[i]);
        }
        
        return profit;
    }
};
