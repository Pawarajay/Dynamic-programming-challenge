123. Best Time to Buy and Sell Stock III

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105

class Solution {
public:

   int solve(int index,int buy,vector<int>&prices,int limit, vector<vector<vector<int>>>&dp)
   {
   if (index == prices.size() || limit == 0)
            return 0;
    if(dp[index][buy][limit]!=-1)
    return dp[index][buy][limit];

    int profit=0;
    if(buy)
    {
        int buyk=-prices[index]+solve(index+1,0,prices,limit,dp);
        int skipk=0+solve(index+1,1,prices,limit,dp);
        profit=max(buyk,skipk);
    }
    else
    {
        int sellk=prices[index]+solve(index+1,1,prices,limit-1,dp);
        int skipk=0+solve(index+1,0,prices,limit,dp);
         profit=max(sellk,skipk);
    }
    return dp[index][buy][limit]=profit;

   }

   int solveOptimize(vector<int>& prices) {
    int n = prices.size();
    vector<vector<int>> curr(2, vector<int>(3, 0));  
    vector<vector<int>> next(2, vector<int>(3, 0));  

    for (int index = n - 1; index >= 0; index--) {
        for (int buy = 0; buy <= 1; buy++) {
            for (int limit = 1; limit <= 2; limit++) {
                int profit = 0;

                if (buy) {
                    int buyk = -prices[index] + next[0][limit];
                    int skipk = 0 + next[1][limit];
                    profit = max(buyk, skipk);
                } else {
                    int sellk = prices[index] + next[1][limit - 1];
                    int skipk = 0 + next[0][limit];
                    profit = max(sellk, skipk);
                }
                curr[buy][limit] = profit;
            }
        }
        next = curr;
    }
    return next[1][2];
}

    int maxProfit(vector<int>& prices) {
    int n=prices.size();
    //vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
    //return solve(0,1,prices,2,dp);   
    return solveOptimize(prices); 
    }
};

#1039. Minimum Score Triangulation of Polygon

You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex in clockwise order.

Polygon triangulation is a process where you divide a polygon into a set of triangles and the vertices of each triangle must also be vertices of the original polygon. Note that no other shapes other than triangles are allowed in the division. This process will result in n - 2 triangles.

You will triangulate the polygon. For each triangle, the weight of that triangle is the product of the values at its vertices. The total score of the triangulation is the sum of these weights over all n - 2 triangles.

Return the minimum possible score that you can achieve with some triangulation of the polygon.

 Example 1:

Input: values = [1,2,3]

Output: 6

Explanation: The polygon is already triangulated, and the score of the only triangle is 6.

Example 2:

Input: values = [3,7,4,5]

Output: 144

Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.
The minimum score is 144.
 
Constraints:

n == values.length
3 <= n <= 50
1 <= values[i] <= 100

class Solution {
public:
  int solve(vector<int>&v,int i,int j)
  {
    if(i+1==j)
    {
        return 0;
    }
    int ans=INT_MAX;
    for(int  k= i+1; k < j ;k++)
    {
        ans=min(ans,v[i]*v[j]*v[k] + solve(v,i,k )+ solve(v,k,j));
    }
    return  ans;
  }

    int solveMemo(vector<int>&v,int i,int j,vector<vector<int>>&dp)
  {
    if(i+1==j)
    {
        return 0;
    }
    if(dp[i][j]!=-1)
    return dp[i][j];
    int ans=INT_MAX;
    for(int  k= i+1; k < j ;k++)
    {
        ans=min(ans,v[i]*v[j]*v[k] + solveMemo(v,i,k ,dp)+ solveMemo(v,k,j,dp));
    }
      dp[i][j]=ans;
      return dp[i][j]; 
  }

    
    int solveTab(vector<int>&v)
  {
      int n=v.size();
      vector<vector<int>>dp(n,vector<int>(n,0));
      for(int i= n-1;i>=0;i++)
      {
        for(int j=i+2;j<n;j++)
        {
        int ans=INT_MAX;
         for(int  k= i+1; k < j ;k++)
    {
         ans=min(ans,v[i]*v[j]*v[k] + dp[i][k]+ dp[k][j]);
    }
        dp[i][j]=ans;
    }
  }
      return dp[0][n-1]; 
  }

    int minScoreTriangulation(vector<int>& values) {
        int n=values.size();
        //return solve(values,0,n-1);

       // vector<vector<int>>dp(n,vector<int>(n,-1));
        //return solveMemo(values,0,n-1,dp);
        //return solveTab(values);

        
     vector<vector<int>> dp(n, vector<int>(n, 0));
    for (int len = 3; len <= n; ++len) {
        for (int i = 0; i + len - 1 < n; ++i) {
            int j = i + len - 1;
            dp[i][j] = INT_MAX;
            for (int k = i + 1; k < j; ++k) {
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + values[i] * values[j] * values[k]);
            }
        }
    }

    return dp[0][n - 1];
    }
};
